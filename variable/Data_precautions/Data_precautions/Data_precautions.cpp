#include <iostream>
using namespace std;
// 제 8장 : 유의사항

// 1) 변수의 유효범위

// 전역 변수
int hp = 10;

// 스택
// { } 중괄호의 범위가 생존 범위
// 같은 이름 두번 사용할때 문제
// 그래서 전역으로 사용할 변수들을 이름을 아예 다르게 명명하는 경우도 있음 예를들어 G_로 시작을 해서 만든다던가 등등

// 2) 연산 우선 순위
// 혹시라도 혼동의 여지가 있다 싶은거는 소괄호로 이용해가지고 
// 우선순위를 먼저 이렇게 강제적으로 찝어주는 게 가독성이 훨씬 더 도움이 됩니다.

// 3) 타입 변환

int main()
{
	int hp = 77777;
	cout << hp << endl;

	// 짝수 여부
	//bool isEven = (hp % 2 == 0);


	// 짝수거나 3으로 나뉘는 값인지
	//bool isEvenOrDivBy3 = ((hp % 2) == 0 || (hp % 3) == 0);

	// 바구니 교체(타입 변환)

	short hp2 = hp;
	// 만약 원래 int형으로 저장되어있던 데이터가 short 로 담기에 너무 크다면 윗쪽 비트 데이터가 짤린 상태로 저장된다.
	float hp3 = hp; //  실수로 변환될 때 정밀도 차이가 있기 때문에 데이터가 손실
	unsigned int hp4 = hp; // 비트 단위로 보면 똑같은데, 동일한 데이터를 분석하는 방법이 달라짐.

	// 곱셈
	// - 오버플로우
	// 만약에 우리가 int에다가 int를 곱함
	// 그러면 숫자가 어마어마 하게 빨리 늘어나기때문에 오버플로우가 일어날수 있음.
	// int * int = int

	// 나눗셈
	// 0 나누기 조심
	// 실수 부분 조심
	// int / int = int
	// 그리고 정수랑 float랑 나눈다거나 float를 정수로 나누면 결과물이 float로 나온다는 특징이 있음.
	// 왜냐면 실수가 우선순위가 더 높음. 결국에는 할때 ex) float ratio = hp / (float)maxhp; 이렇게 강제로 할당 해줌.

	int maxhp = 1000;
	float ratio = hp / (float)maxhp; // => 0.123
	// 즉 바구니 교체는 굉장히 위험한 작업이니까 
	// 바구니가 교체되는 그런 부분이 있다고 하면 혹시라도 뭔가가 실수하지 않고 있는지 
	// 데이터가 잘리지 않는지 분실되지 않는지 아니면은 부호가 없어지면서 완전히 다른 의미가 되지 않는지를 
	// 항상 주의깊게 봐야 된다는 그런 얘기가 되겠습니다.